================================= ZADANIE 3 - LINUX ====================================================================
1) ps -ef | grep zadanie_2
michal     28281   27942 99 12:14 pts/0    00:01:05 ./zadanie_2

2) cat /proc/28281/status | grep Sig
SigQ:   0/124791 - liczba sygnałów w kolejce oczekujących na obsługę (ktualnie/limit)
SigPnd: 0000000000000000 - sygnały oczekujące na obsługę w kontekście procesu
SigBlk: 0000000000000004 - sygnały zablokowane przez proces
SigIgn: 0000000000002000 - sygnały ignorowane przez proces
SigCgt: 0000000000004a00 - sygnały przechwycone przez proces, czyli sygnały, dla których zdefiniowano specjalne procedury obsługi


================================= ZADANIE 3 - SOLARIS ==================================================================
1) mmarkuze@diablo:~/Dokumenty/SCR_systemy_operacyjne/lab_04_dom$ pflags 17751
17751:  ./zadanie_2
       data model = _ILP32  flags = MSACCT|MSFORK
/1:    flags = 0
       sigmask = 0x0001e000,0x00000000

> (MSACCT) - ma włączone szczegółowe śledzenie zasobów (MSACCT)
> (MSFORK) - proces jest gotowy lub zdolny do tworzenia nowych procesów
> (_IPL32) określa model danych używany przez proces (rozmiary typów int, long, i wskaźników są 32-bitowe)
> (sigmask) - wskazują na maskę sygnałów procesu – sygnały, które są aktualnie zablokowane w danym procesie


================================= ZADANIE 4 - LINUX ====================================================================
0) yes "hej" | cat | cat

1) ps -ef
UID          PID    PPID  C STIME TTY          TIME CMD
michal    425129   33067  0 17:42 pts/0    00:00:00 yes hello
michal    425130   33067  0 17:42 pts/0    00:00:00 cat
michal    425131   33067  1 17:42 pts/0    00:00:02 cat

2) ls -l /proc/425129/fd
razem 0
lrwx------ 1 michal michal 64 lis  3 17:47 0 -> /dev/pts/0
l-wx------ 1 michal michal 64 lis  3 17:47 1 -> 'pipe:[734744]'
lrwx------ 1 michal michal 64 lis  3 17:47 2 -> /dev/pts/0
> deskryptor 0 (stdin) -  jest podłączony do terminala /dev/pts/0, co oznacza, że proces yes hello czyta dane z terminala
> deskryptor 1 (stdout) - jest skierowany do potoku pipe:[734744]. To oznacza, że yes przesyła dane wyjściowe do potoku 734744.

3) ls -l /proc/425130/fd
razem 0
lr-x------ 1 michal michal 64 lis  3 17:47 0 -> 'pipe:[734744]'
l-wx------ 1 michal michal 64 lis  3 17:47 1 -> 'pipe:[734746]'
lrwx------ 1 michal michal 64 lis  3 17:47 2 -> /dev/pts/0
> deskryptor 0 (stdin) - jest skierowany do potoku pipe:[734744], co oznacza, że proces cat odbiera dane z potoku pochodzącego od procesu yes.
> deskryptor 1 (stdout) - jest skierowany do nowego potoku pipe:[734746]. Proces cat wysyła dane do kolejnego potoku, przekazując je dalej do kolejnego procesu.

4) ls -l /proc/425131/fd
lr-x------ 1 michal michal 64 lis  3 17:48 0 -> 'pipe:[734746]'
lrwx------ 1 michal michal 64 lis  3 17:48 1 -> /dev/pts/0
lrwx------ 1 michal michal 64 lis  3 17:48 2 -> /dev/pts/0
> deskryptor 0 (stdin) - jest skierowany do potoku pipe:[734746], co oznacza, że proces cat odbiera dane z potoku pochodzącego od poprzedniego procesu cat.
> deskryptor 1 (stdout) - jest skierowany do terminala /dev/pts/0, co oznacza, że cat kończy potok, wyświetlając dane na terminalu.

5) Odpowiedź:
Na podstawie identyfikatorów potoków w deskryptorach stdin i stdout można stwierdzić,
że kolejność procesów w potoku jest następująca: yes hello -> cat -> cat
Potwierdzają to identyfikatory potoków (pipe:[734744] i pipe:[734746]), które łączą procesy w odpowiedniej kolejności.


================================= ZADANIE 4 - SOLARIS ==================================================================
0) yes "hej" | cat | cat

1) mmarkuze@diablo:~$ ps -ef | grep 'yes "hej"'
mmarkuze 20447 20443   5 18:04:41 pts/4       3:41 yes hej

2) mmarkuze@diablo:~$ ps -ef | grep 'cat'
mmarkuze 20449 20443   5 18:04:41 pts/4       0:31 cat
mmarkuze 20448 20443   1 18:04:41 pts/4       0:03 cat

3) mmarkuze@diablo:~$ pfiles 20447
20447:  yes hej
  Current rlimit: 256 file descriptors
   0: S_IFCHR mode:0620 dev:345,0 ino:12582924 uid:17134 gid:7 rdev:24,4
      O_RDWR|O_NOCTTY|O_LARGEFILE
      /devices/pseudo/pts@0:4
   1: S_IFIFO mode:0000 dev:343,0 ino:34245 uid:17134 gid:1022 size:0
      O_RDWR
   2: S_IFCHR mode:0620 dev:345,0 ino:12582924 uid:17134 gid:7 rdev:24,4
      O_RDWR|O_NOCTTY|O_LARGEFILE
      /devices/pseudo/pts@0:4

4) mmarkuze@diablo:~$ pfiles 20448
20448:  cat
  Current rlimit: 256 file descriptors
   0: S_IFIFO mode:0000 dev:343,0 ino:34245 uid:17134 gid:1022 size:20480
      O_RDWR
   1: S_IFIFO mode:0000 dev:343,0 ino:34246 uid:17134 gid:1022 size:0
      O_RDWR
   2: S_IFCHR mode:0620 dev:345,0 ino:12582924 uid:17134 gid:7 rdev:24,4
      O_RDWR|O_NOCTTY|O_LARGEFILE
      /devices/pseudo/pts@0:4

5) mmarkuze@diablo:~$ pfiles 20449
20449:  cat
  Current rlimit: 256 file descriptors
   0: S_IFIFO mode:0000 dev:343,0 ino:34246 uid:17134 gid:1022 size:18432
      O_RDWR
   1: S_IFCHR mode:0620 dev:345,0 ino:12582924 uid:17134 gid:7 rdev:24,4
      O_RDWR|O_NOCTTY|O_LARGEFILE
      /devices/pseudo/pts@0:4
   2: S_IFCHR mode:0620 dev:345,0 ino:12582924 uid:17134 gid:7 rdev:24,4
      O_RDWR|O_NOCTTY|O_LARGEFILE
      /devices/pseudo/pts@0:4


6) Wnioski:
- Proces 20447 (yes hej):
Deskryptor pliku 1 (standardowe wyjście) jest S_IFIFO (czyli FIFO/potok) i ma ten sam ino (inode) co deskryptor
pliku 0 w procesie 20448 (cat). To sugeruje, że yes hej przekierowuje swoje wyjście do cat.

- Proces 20448 (cat):
Deskryptor pliku 0 (standardowe wejście) wskazuje na potok o identyfikatorze ino:34245, co odpowiada wyjściu z procesu 20447.
Deskryptor pliku 1 (standardowe wyjście) jest również S_IFIFO i ma ino:34246, który jest używany jako deskryptor
pliku 0 w kolejnym procesie, 20449 (cat), wskazując, że cat przesyła swoje dane wyjściowe do kolejnego cat.

- Proces 20449 (cat):
Deskryptor pliku 0 odnosi się do tego samego ino:34246, co deskryptor pliku 1 w procesie 20448. To wskazuje,
że dane przepływają z jednego procesu cat do drugiego.

- identyfikatory "ino" w odpowiednich deskryptorach wskazują na hierarchiczność procesów w wywołanym potoku









